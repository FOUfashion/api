'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _boom = require('boom');

var _boom2 = _interopRequireDefault(_boom);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _helpersThinky = require('../helpers/thinky');

var _helpersThinky2 = _interopRequireDefault(_helpersThinky);

var _helpersScopes = require('../helpers/scopes');

var _helpersScopes2 = _interopRequireDefault(_helpersScopes);

var _controllersHome = require('../controllers/home');

var _controllersHome2 = _interopRequireDefault(_controllersHome);

var _controllersAuth = require('../controllers/auth');

var _controllersAuth2 = _interopRequireDefault(_controllersAuth);

var _controllersAccount = require('../controllers/account');

var _controllersAccount2 = _interopRequireDefault(_controllersAccount);

var _controllersProfile = require('../controllers/profile');

var _controllersProfile2 = _interopRequireDefault(_controllersProfile);

var _controllersComment = require('../controllers/comment');

var _controllersComment2 = _interopRequireDefault(_controllersComment);

var _controllersPost = require('../controllers/post');

var _controllersPost2 = _interopRequireDefault(_controllersPost);

var home = new _controllersHome2['default']();
var auth = new _controllersAuth2['default']();
var account = new _controllersAccount2['default']();
var profile = new _controllersProfile2['default']();
var comment = new _controllersComment2['default']();
var post = new _controllersPost2['default']();

var routes = [
// Home
{
  method: 'GET',
  path: '/',
  handler: home.index,
  config: {
    auth: {
      mode: 'try'
    }
  }
},

// Auth
{
  method: 'POST',
  path: '/login',
  handler: auth.logIn,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    validate: {
      payload: {
        username: _joi2['default'].string().required(),
        password: _joi2['default'].string().required()
      }
    }
  }
}, {
  method: 'POST',
  path: '/oauth/authorize',
  handler: auth.authorize,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    validate: {
      payload: {
        scope: _joi2['default'].string(),
        clientId: _joi2['default'].string().required()
      }
    }
  }
}, {
  method: 'POST',
  path: '/oauth/exchange/code',
  handler: auth.exchangeCode,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    validate: {
      payload: {
        code: _joi2['default'].string().required(),
        clientId: _joi2['default'].string().required(),
        clientSecret: _joi2['default'].string().required()
      }
    }
  }
}, {
  method: 'POST',
  path: '/oauth/exchange/credentials',
  handler: auth.exchangeCredentials,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    validate: {
      payload: {
        username: _joi2['default'].string().required(),
        password: _joi2['default'].string().required()
      }
    }
  }
},

// Account
{
  method: 'GET',
  path: '/account',
  handler: account.getAuthenticated
}, {
  method: 'GET',
  path: '/account/{id}',
  handler: account.get
}, {
  method: 'POST',
  path: '/account',
  handler: account.create,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    validate: {
      payload: {
        email: _joi2['default'].string().required().email().max(64).lowercase().trim(),
        username: _joi2['default'].string().required().alphanum().min(4).max(12).trim(),
        password: _joi2['default'].string().required().min(6).max(32).trim(),
        firstName: _joi2['default'].string().required().min(1).max(32).trim(),
        lastName: _joi2['default'].string().required().min(1).max(32).trim()
      }
    }
  }
}, {
  method: 'PUT',
  path: '/account/{id}',
  handler: account.update,
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'account'
      }
    },
    validate: {
      payload: {
        password: _joi2['default'].string().min(6).max(32).trim()
      }
    }
  }
}, {
  method: 'DELETE',
  path: '/account/{id}',
  handler: account['delete'],
  config: {
    auth: {
      scope: [_helpersScopes2['default'].FIRST_PARTY]
    },
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'account'
      }
    }
  }
},

// Profile
{
  method: 'GET',
  path: '/profile',
  handler: profile.getAuthenticated
}, {
  method: 'GET',
  path: '/profile/{id}',
  handler: profile.get
}, {
  method: 'PUT',
  path: '/profile/{id}',
  handler: profile.update,
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'profile'
      }
    },
    validate: {
      payload: {
        firstName: _joi2['default'].string().min(1).max(32).trim(),
        lastName: _joi2['default'].string().min(1).max(32).trim()
      }
    }
  }
},

// Comment
{
  method: 'GET',
  path: '/comment/{id}',
  handler: comment.get
}, {
  method: 'POST',
  path: '/comment',
  handler: comment.create,
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'post'
      }
    },
    validate: {
      payload: {
        body: _joi2['default'].string().required().min(1).max(32).trim(),
        postId: _joi2['default'].string().guid().required()
      }
    }
  }
}, {
  method: 'PUT',
  path: '/comment/{id}',
  handler: comment.update,
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'comment'
      }
    },
    validate: {
      payload: {
        body: _joi2['default'].string().min(1).max(32).trim()
      }
    }
  }
}, {
  method: 'DELETE',
  path: '/comment/{id}',
  handler: comment['delete'],
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'comment'
      }
    }
  }
},

// Post
{
  method: 'GET',
  path: '/post/{id}',
  handler: post.get
}, {
  method: 'POST',
  path: '/post',
  handler: post.create,
  config: {
    validate: {
      payload: {
        body: _joi2['default'].string().required().min(1).max(32).trim()
      }
    }
  }
}, {
  method: 'PUT',
  path: '/post/{id}',
  handler: post.update,
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'post'
      }
    },
    validate: {
      payload: {
        body: _joi2['default'].string().min(1).max(32).trim()
      }
    }
  }
}, {
  method: 'DELETE',
  path: '/post/{id}',
  handler: post['delete'],
  config: {
    plugins: {
      'hapi-auth-ownership': {
        ownershipRule: 'post'
      }
    }
  }
}

// TODO: /feed
];

// Catch errors for async handlers
exports['default'] = routes.map(function (route) {
  var handler = route.handler;
  var docNameRegex = /.*r\.table\("(.+?)"\).*/gm;

  route.handler = function (request, reply) {
    var result = handler(request, reply);

    if (result && result['catch']) {
      result['catch'](function (error) {
        // $lab:coverage:off$
        if (error instanceof _helpersThinky2['default'].Errors.DocumentNotFound) {
          var matches = docNameRegex.exec(error.message);
          var docName = matches && matches[1] || 'Document';
          reply(_boom2['default'].notFound(docName + ' not found'));
        } else {
          reply(error);
        }
        // $lab:coverage:on$
      });
    }
  };

  return route;
});
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvcm91dGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O21CQUNQLEtBQUs7Ozs7NkJBRUYsbUJBQW1COzs7OzZCQUNuQixtQkFBbUI7Ozs7K0JBRWpCLHFCQUFxQjs7OzsrQkFDckIscUJBQXFCOzs7O2tDQUNsQix3QkFBd0I7Ozs7a0NBQ3hCLHdCQUF3Qjs7OztrQ0FDeEIsd0JBQXdCOzs7OytCQUMzQixxQkFBcUI7Ozs7QUFFMUMsSUFBTSxJQUFJLEdBQUcsa0NBQWMsQ0FBQztBQUM1QixJQUFNLElBQUksR0FBRyxrQ0FBYyxDQUFDO0FBQzVCLElBQU0sT0FBTyxHQUFHLHFDQUFpQixDQUFDO0FBQ2xDLElBQU0sT0FBTyxHQUFHLHFDQUFpQixDQUFDO0FBQ2xDLElBQU0sT0FBTyxHQUFHLHFDQUFpQixDQUFDO0FBQ2xDLElBQU0sSUFBSSxHQUFHLGtDQUFjLENBQUM7O0FBRTVCLElBQU0sTUFBTSxHQUFHOztBQUViO0FBQ0UsUUFBTSxFQUFFLEtBQUs7QUFDYixNQUFJLEVBQUUsR0FBRztBQUNULFNBQU8sRUFBRSxJQUFJLENBQUMsS0FBSztBQUNuQixRQUFNLEVBQUU7QUFDTixRQUFJLEVBQUU7QUFDSixVQUFJLEVBQUUsS0FBSztLQUNaO0dBQ0Y7Q0FDRjs7O0FBR0Q7QUFDRSxRQUFNLEVBQUUsTUFBTTtBQUNkLE1BQUksRUFBRSxRQUFRO0FBQ2QsU0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ25CLFFBQU0sRUFBRTtBQUNOLFFBQUksRUFBRTtBQUNKLFdBQUssRUFBRSxDQUFDLDJCQUFPLFdBQVcsQ0FBQztLQUM1QjtBQUNELFlBQVEsRUFBRTtBQUNSLGFBQU8sRUFBRTtBQUNQLGdCQUFRLEVBQUUsaUJBQUksTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0FBQ2pDLGdCQUFRLEVBQUUsaUJBQUksTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO09BQ2xDO0tBQ0Y7R0FDRjtD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LEtBQUssQ0FBQztDQUNkLENBQUMiLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvb20gZnJvbSAnYm9vbSc7XG5pbXBvcnQgSm9pIGZyb20gJ2pvaSc7XG5cbmltcG9ydCB0aGlua3kgZnJvbSAnLi4vaGVscGVycy90aGlua3knO1xuaW1wb3J0IHNjb3BlcyBmcm9tICcuLi9oZWxwZXJzL3Njb3Blcyc7XG5cbmltcG9ydCBIb21lQ3RybCBmcm9tICcuLi9jb250cm9sbGVycy9ob21lJztcbmltcG9ydCBBdXRoQ3RybCBmcm9tICcuLi9jb250cm9sbGVycy9hdXRoJztcbmltcG9ydCBBY2NvdW50Q3RybCBmcm9tICcuLi9jb250cm9sbGVycy9hY2NvdW50JztcbmltcG9ydCBQcm9maWxlQ3RybCBmcm9tICcuLi9jb250cm9sbGVycy9wcm9maWxlJztcbmltcG9ydCBDb21tZW50Q3RybCBmcm9tICcuLi9jb250cm9sbGVycy9jb21tZW50JztcbmltcG9ydCBQb3N0Q3RybCBmcm9tICcuLi9jb250cm9sbGVycy9wb3N0JztcblxuY29uc3QgaG9tZSA9IG5ldyBIb21lQ3RybCgpO1xuY29uc3QgYXV0aCA9IG5ldyBBdXRoQ3RybCgpO1xuY29uc3QgYWNjb3VudCA9IG5ldyBBY2NvdW50Q3RybCgpO1xuY29uc3QgcHJvZmlsZSA9IG5ldyBQcm9maWxlQ3RybCgpO1xuY29uc3QgY29tbWVudCA9IG5ldyBDb21tZW50Q3RybCgpO1xuY29uc3QgcG9zdCA9IG5ldyBQb3N0Q3RybCgpO1xuXG5jb25zdCByb3V0ZXMgPSBbXG4gIC8vIEhvbWVcbiAge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy8nLFxuICAgIGhhbmRsZXI6IGhvbWUuaW5kZXgsXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIG1vZGU6ICd0cnknXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIEF1dGhcbiAge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHBhdGg6ICcvbG9naW4nLFxuICAgIGhhbmRsZXI6IGF1dGgubG9nSW4sXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVzLkZJUlNUX1BBUlRZXVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICB1c2VybmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgICAgICAgcGFzc3dvcmQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL29hdXRoL2F1dGhvcml6ZScsXG4gICAgaGFuZGxlcjogYXV0aC5hdXRob3JpemUsXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVzLkZJUlNUX1BBUlRZXVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBzY29wZTogSm9pLnN0cmluZygpLFxuICAgICAgICAgIGNsaWVudElkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgcGF0aDogJy9vYXV0aC9leGNoYW5nZS9jb2RlJyxcbiAgICBoYW5kbGVyOiBhdXRoLmV4Y2hhbmdlQ29kZSxcbiAgICBjb25maWc6IHtcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgc2NvcGU6IFtzY29wZXMuRklSU1RfUEFSVFldXG4gICAgICB9LFxuICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGNvZGU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIGNsaWVudElkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICAgICAgICBjbGllbnRTZWNyZXQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL29hdXRoL2V4Y2hhbmdlL2NyZWRlbnRpYWxzJyxcbiAgICBoYW5kbGVyOiBhdXRoLmV4Y2hhbmdlQ3JlZGVudGlhbHMsXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVzLkZJUlNUX1BBUlRZXVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICB1c2VybmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgICAgICAgcGFzc3dvcmQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gQWNjb3VudFxuICB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FjY291bnQnLFxuICAgIGhhbmRsZXI6IGFjY291bnQuZ2V0QXV0aGVudGljYXRlZFxuICB9LCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FjY291bnQve2lkfScsXG4gICAgaGFuZGxlcjogYWNjb3VudC5nZXRcbiAgfSwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHBhdGg6ICcvYWNjb3VudCcsXG4gICAgaGFuZGxlcjogYWNjb3VudC5jcmVhdGUsXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVzLkZJUlNUX1BBUlRZXVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlbWFpbDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkuZW1haWwoKS5tYXgoNjQpLmxvd2VyY2FzZSgpLnRyaW0oKSxcbiAgICAgICAgICB1c2VybmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkuYWxwaGFudW0oKS5taW4oNCkubWF4KDEyKS50cmltKCksXG4gICAgICAgICAgcGFzc3dvcmQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLm1pbig2KS5tYXgoMzIpLnRyaW0oKSxcbiAgICAgICAgICBmaXJzdE5hbWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLm1pbigxKS5tYXgoMzIpLnRyaW0oKSxcbiAgICAgICAgICBsYXN0TmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkubWluKDEpLm1heCgzMikudHJpbSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIHBhdGg6ICcvYWNjb3VudC97aWR9JyxcbiAgICBoYW5kbGVyOiBhY2NvdW50LnVwZGF0ZSxcbiAgICBjb25maWc6IHtcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgc2NvcGU6IFtzY29wZXMuRklSU1RfUEFSVFldXG4gICAgICB9LFxuICAgICAgcGx1Z2luczoge1xuICAgICAgICAnaGFwaS1hdXRoLW93bmVyc2hpcCc6IHtcbiAgICAgICAgICBvd25lcnNoaXBSdWxlOiAnYWNjb3VudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBwYXNzd29yZDogSm9pLnN0cmluZygpLm1pbig2KS5tYXgoMzIpLnRyaW0oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICBwYXRoOiAnL2FjY291bnQve2lkfScsXG4gICAgaGFuZGxlcjogYWNjb3VudC5kZWxldGUsXG4gICAgY29uZmlnOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVzLkZJUlNUX1BBUlRZXVxuICAgICAgfSxcbiAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgJ2hhcGktYXV0aC1vd25lcnNoaXAnOiB7XG4gICAgICAgICAgb3duZXJzaGlwUnVsZTogJ2FjY291bnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gUHJvZmlsZVxuICB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL3Byb2ZpbGUnLFxuICAgIGhhbmRsZXI6IHByb2ZpbGUuZ2V0QXV0aGVudGljYXRlZFxuICB9LCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL3Byb2ZpbGUve2lkfScsXG4gICAgaGFuZGxlcjogcHJvZmlsZS5nZXRcbiAgfSwge1xuICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgcGF0aDogJy9wcm9maWxlL3tpZH0nLFxuICAgIGhhbmRsZXI6IHByb2ZpbGUudXBkYXRlLFxuICAgIGNvbmZpZzoge1xuICAgICAgcGx1Z2luczoge1xuICAgICAgICAnaGFwaS1hdXRoLW93bmVyc2hpcCc6IHtcbiAgICAgICAgICBvd25lcnNoaXBSdWxlOiAncHJvZmlsZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBmaXJzdE5hbWU6IEpvaS5zdHJpbmcoKS5taW4oMSkubWF4KDMyKS50cmltKCksXG4gICAgICAgICAgbGFzdE5hbWU6IEpvaS5zdHJpbmcoKS5taW4oMSkubWF4KDMyKS50cmltKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBDb21tZW50XG4gIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvY29tbWVudC97aWR9JyxcbiAgICBoYW5kbGVyOiBjb21tZW50LmdldFxuICB9LCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgcGF0aDogJy9jb21tZW50JyxcbiAgICBoYW5kbGVyOiBjb21tZW50LmNyZWF0ZSxcbiAgICBjb25maWc6IHtcbiAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgJ2hhcGktYXV0aC1vd25lcnNoaXAnOiB7XG4gICAgICAgICAgb3duZXJzaGlwUnVsZTogJ3Bvc3QnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2YWxpZGF0ZToge1xuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgYm9keTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkubWluKDEpLm1heCgzMikudHJpbSgpLFxuICAgICAgICAgIHBvc3RJZDogSm9pLnN0cmluZygpLmd1aWQoKS5yZXF1aXJlZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIHBhdGg6ICcvY29tbWVudC97aWR9JyxcbiAgICBoYW5kbGVyOiBjb21tZW50LnVwZGF0ZSxcbiAgICBjb25maWc6IHtcbiAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgJ2hhcGktYXV0aC1vd25lcnNoaXAnOiB7XG4gICAgICAgICAgb3duZXJzaGlwUnVsZTogJ2NvbW1lbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2YWxpZGF0ZToge1xuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgYm9keTogSm9pLnN0cmluZygpLm1pbigxKS5tYXgoMzIpLnRyaW0oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICBwYXRoOiAnL2NvbW1lbnQve2lkfScsXG4gICAgaGFuZGxlcjogY29tbWVudC5kZWxldGUsXG4gICAgY29uZmlnOiB7XG4gICAgICBwbHVnaW5zOiB7XG4gICAgICAgICdoYXBpLWF1dGgtb3duZXJzaGlwJzoge1xuICAgICAgICAgIG93bmVyc2hpcFJ1bGU6ICdjb21tZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIFBvc3RcbiAge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9wb3N0L3tpZH0nLFxuICAgIGhhbmRsZXI6IHBvc3QuZ2V0XG4gIH0sIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL3Bvc3QnLFxuICAgIGhhbmRsZXI6IHBvc3QuY3JlYXRlLFxuICAgIGNvbmZpZzoge1xuICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGJvZHk6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLm1pbigxKS5tYXgoMzIpLnRyaW0oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgbWV0aG9kOiAnUFVUJyxcbiAgICBwYXRoOiAnL3Bvc3Qve2lkfScsXG4gICAgaGFuZGxlcjogcG9zdC51cGRhdGUsXG4gICAgY29uZmlnOiB7XG4gICAgICBwbHVnaW5zOiB7XG4gICAgICAgICdoYXBpLWF1dGgtb3duZXJzaGlwJzoge1xuICAgICAgICAgIG93bmVyc2hpcFJ1bGU6ICdwb3N0J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGJvZHk6IEpvaS5zdHJpbmcoKS5taW4oMSkubWF4KDMyKS50cmltKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgcGF0aDogJy9wb3N0L3tpZH0nLFxuICAgIGhhbmRsZXI6IHBvc3QuZGVsZXRlLFxuICAgIGNvbmZpZzoge1xuICAgICAgcGx1Z2luczoge1xuICAgICAgICAnaGFwaS1hdXRoLW93bmVyc2hpcCc6IHtcbiAgICAgICAgICBvd25lcnNoaXBSdWxlOiAncG9zdCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IC9mZWVkXG5dO1xuXG4vLyBDYXRjaCBlcnJvcnMgZm9yIGFzeW5jIGhhbmRsZXJzXG5leHBvcnQgZGVmYXVsdCByb3V0ZXMubWFwKHJvdXRlID0+IHtcbiAgY29uc3QgaGFuZGxlciA9IHJvdXRlLmhhbmRsZXI7XG4gIGNvbnN0IGRvY05hbWVSZWdleCA9IC8uKnJcXC50YWJsZVxcKFwiKC4rPylcIlxcKS4qL2dtO1xuXG4gIHJvdXRlLmhhbmRsZXIgPSBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXIocmVxdWVzdCwgcmVwbHkpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuY2F0Y2gpIHtcbiAgICAgIHJlc3VsdC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIC8vICRsYWI6Y292ZXJhZ2U6b2ZmJFxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB0aGlua3kuRXJyb3JzLkRvY3VtZW50Tm90Rm91bmQpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaGVzID0gZG9jTmFtZVJlZ2V4LmV4ZWMoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgY29uc3QgZG9jTmFtZSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXSB8fCAnRG9jdW1lbnQnO1xuICAgICAgICAgIHJlcGx5KEJvb20ubm90Rm91bmQoYCR7ZG9jTmFtZX0gbm90IGZvdW5kYCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGx5KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAkbGFiOmNvdmVyYWdlOm9uJFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiByb3V0ZTtcbn0pO1xuIl19