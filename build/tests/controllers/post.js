'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _dummy = require('../dummy');

var _dummy2 = _interopRequireDefault(_dummy);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('PostCtrl', function () {

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[get] returns the correct post by id', function (done) {
    var options = {
      method: 'GET',
      url: '/post/' + _data2['default'].post1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.body).to.equal(_data2['default'].post1.body);
      expect(result.id).to.equal(_data2['default'].post1.id);

      done();
    });
  });

  lab.test('[get] returns 404 for incorrect ids', function (done) {
    var options = {
      method: 'GET',
      url: '/post/123-456',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[create] returns the post object', function (done) {
    var options = {
      method: 'POST',
      url: '/post',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].post()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(201);
      expect(result.body).to.equal(options.payload.body);
      expect(result.id).to.exist();

      done();
    });
  });

  lab.test('[update] returns 200 even if update is empty', function (done) {
    var options = {
      method: 'PUT',
      url: '/post/' + _data2['default'].post1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(200);
      done();
    });
  });

  lab.test('[update] returns the new body when updated', function (done) {
    var options = {
      method: 'PUT',
      url: '/post/' + _data2['default'].post1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].post()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.body).to.equal(options.payload.body);

      done();
    });
  });

  lab.test('[update] returns 401 when trying to update someone else\'s post', function (done) {
    var options = {
      method: 'PUT',
      url: '/post/' + _data2['default'].post1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: _dummy2['default'].post()
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });

  lab.test('[delete] returns 204 when deleted', function (done) {
    var options = {
      method: 'DELETE',
      url: '/post/' + _data2['default'].post2.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(204);
      done();
    });
  });

  lab.test('[delete] returns 401 when trying to delete someone else\'s post', function (done) {
    var options = {
      method: 'DELETE',
      url: '/post/' + _data2['default'].post1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: _dummy2['default'].post()
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,