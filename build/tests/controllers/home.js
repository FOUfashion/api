'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('HomeCtrl', function () {

  lab.test('[index] returns basic info', function (done) {
    var options = {
      method: 'GET',
      url: '/'
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.exist();
      expect(result.received).to.exist();

      done();
    });
  });

  lab.test('[index] returns authenticated=true if given a valid bearer', function (done) {
    var options = {
      method: 'GET',
      url: '/',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.equal(true);
      expect(result.received).to.exist();

      done();
    });
  });

  lab.test('[index] returns authenticated=false if given an invalid bearer', function (done) {
    var options = {
      method: 'GET',
      url: '/',
      headers: {
        'Authorization': 'Bearer 123'
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.equal(false);
      expect(result.received).to.exist();

      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9jb250cm9sbGVycy9ob21lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O21CQUFnQixLQUFLOzs7O3NCQUNGLGNBQWM7Ozs7b0JBRWhCLFNBQVM7Ozs7QUFFMUIsSUFBTSxNQUFNLEdBQUcsaUJBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQztBQUM5QixJQUFNLEdBQUcsR0FBRyxpQkFBSSxNQUFNLEVBQUUsQ0FBQzs7UUFBbkIsR0FBRyxHQUFILEdBQUc7QUFFaEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsWUFBVzs7QUFFcEMsS0FBRyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxVQUFTLElBQUksRUFBRTtBQUNwRCxRQUFNLE9BQU8sR0FBRztBQUNkLFlBQU0sRUFBRSxLQUFLO0FBQ2IsU0FBRyxFQUFFLEdBQUc7S0FDVCxDQUFDOztBQUVGLHdCQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBUyxRQUFRLEVBQUU7QUFDeEMsVUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7QUFFL0IsWUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLFlBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQyxZQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixZQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQyxZQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN4QyxZQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFbkMsVUFBSSxFQUFFLENBQUM7S0FDUixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsS0FBRyxDQUFDLElBQUksQ0FBQyw0REFBNEQsRUFBRSxVQUFTLElBQUksRUFBRTtBQUNwRixRQUFNLE9BQU8sR0FBRztBQUNkLFlBQU0sRUFBRSxLQUFLO0FBQ2IsU0FBRyxFQUFFLEdBQUc7QUFDUixhQUFPLEVBQUU7QUFDUCx1QkFBZSxjQUFZLGtCQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxBQUFFO09BQ2pEO0tBQ0YsQ0FBQzs7QUFFRix3QkFBTyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVMsUUFBUSxFQUFFO0FBQ3hDLFVBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7O0FBRS9CLFlBQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQyxZQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFM0MsWUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0IsWUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLFlBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUVuQyxVQUFJLEVBQUUsQ0FBQztLQUNSLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxLQUFHLENBQUMsSUFBSSxDQUFDLGdFQUFnRSxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ3hGLFFBQU0sT0FBTyxHQUFHO0FBQ2QsWUFBTSxFQUFFLEtBQUs7QUFDYixTQUFHLEVBQUUsR0FBRztBQUNSLGFBQU8sRUFBRTtBQUNQLHVCQUFlLGNBQWM7T0FDOUI7S0FDRixDQUFDOztBQUVGLHdCQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBUyxRQUFRLEVBQUU7QUFDeEMsVUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7QUFFL0IsWUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLFlBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQyxZQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixZQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQyxZQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0MsWUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRW5DLFVBQUksRUFBRSxDQUFDO0tBQ1IsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6ImhvbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGFiIGZyb20gJ2xhYic7XG5pbXBvcnQgc2VydmVyIGZyb20gJy4uLy4uL3NlcnZlcic7XG5cbmltcG9ydCBkYXRhIGZyb20gJy4uL2RhdGEnO1xuXG5jb25zdCBleHBlY3QgPSBMYWIuYXNzZXJ0aW9ucy5leHBlY3Q7XG5leHBvcnQgY29uc3QgbGFiID0gTGFiLnNjcmlwdCgpO1xuXG5sYWIuZXhwZXJpbWVudCgnSG9tZUN0cmwnLCBmdW5jdGlvbigpIHtcblxuICBsYWIudGVzdCgnW2luZGV4XSByZXR1cm5zIGJhc2ljIGluZm8nLCBmdW5jdGlvbihkb25lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvJ1xuICAgIH07XG5cbiAgICBzZXJ2ZXIuaW5qZWN0KG9wdGlvbnMsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5yZXN1bHQ7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuYW4uaW5zdGFuY2VvZihPYmplY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lm5hbWUpLnRvLmV4aXN0KCk7XG4gICAgICBleHBlY3QocmVzdWx0LnZlcnNpb24pLnRvLmV4aXN0KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmF1dGhlbnRpY2F0ZWQpLnRvLmV4aXN0KCk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY2VpdmVkKS50by5leGlzdCgpO1xuXG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGxhYi50ZXN0KCdbaW5kZXhdIHJldHVybnMgYXV0aGVudGljYXRlZD10cnVlIGlmIGdpdmVuIGEgdmFsaWQgYmVhcmVyJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiAnLycsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2RhdGEudHAudG9rZW4udmFsdWV9YFxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZXJ2ZXIuaW5qZWN0KG9wdGlvbnMsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5yZXN1bHQ7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuYW4uaW5zdGFuY2VvZihPYmplY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lm5hbWUpLnRvLmV4aXN0KCk7XG4gICAgICBleHBlY3QocmVzdWx0LnZlcnNpb24pLnRvLmV4aXN0KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmF1dGhlbnRpY2F0ZWQpLnRvLmVxdWFsKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZWNlaXZlZCkudG8uZXhpc3QoKTtcblxuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBsYWIudGVzdCgnW2luZGV4XSByZXR1cm5zIGF1dGhlbnRpY2F0ZWQ9ZmFsc2UgaWYgZ2l2ZW4gYW4gaW52YWxpZCBiZWFyZXInLCBmdW5jdGlvbihkb25lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyIDEyM2BcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmFuLmluc3RhbmNlb2YoT2JqZWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5uYW1lKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52ZXJzaW9uKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdXRoZW50aWNhdGVkKS50by5lcXVhbChmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY2VpdmVkKS50by5leGlzdCgpO1xuXG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==