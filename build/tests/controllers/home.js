'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('HomeCtrl', function () {

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[index] returns basic info', function (done) {
    var options = {
      method: 'GET',
      url: '/'
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.exist();
      expect(result.received).to.exist();

      done();
    });
  });

  lab.test('[index] returns authenticated=true if given a valid bearer', function (done) {
    var options = {
      method: 'GET',
      url: '/',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.equal(true);
      expect(result.received).to.exist();

      done();
    });
  });

  lab.test('[index] returns authenticated=false if given an invalid bearer', function (done) {
    var options = {
      method: 'GET',
      url: '/',
      headers: {
        'Authorization': 'Bearer 123'
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result).to.be.an['instanceof'](Object);

      expect(result.name).to.exist();
      expect(result.version).to.exist();
      expect(result.authenticated).to.equal(false);
      expect(result.received).to.exist();

      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9jb250cm9sbGVycy9ob21lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O21CQUFnQixLQUFLOzs7O3NCQUNGLGNBQWM7Ozs7b0JBRWhCLFNBQVM7Ozs7QUFFMUIsSUFBTSxNQUFNLEdBQUcsaUJBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQztBQUM5QixJQUFNLEdBQUcsR0FBRyxpQkFBSSxNQUFNLEVBQUUsQ0FBQzs7UUFBbkIsR0FBRyxHQUFILEdBQUc7QUFFaEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsWUFBVzs7QUFFcEMsS0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksRUFBSTtBQUNqQixzQkFBSyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzlCLENBQUMsQ0FBQzs7QUFFSCxLQUFHLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ3BELFFBQU0sT0FBTyxHQUFHO0FBQ2QsWUFBTSxFQUFFLEtBQUs7QUFDYixTQUFHLEVBQUUsR0FBRztLQUNULENBQUM7O0FBRUYsd0JBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFTLFFBQVEsRUFBRTtBQUN4QyxVQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDOztBQUUvQixZQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNDLFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9CLFlBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLFlBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3hDLFlBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUVuQyxVQUFJLEVBQUUsQ0FBQztLQUNSLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxLQUFHLENBQUMsSUFBSSxDQUFDLDREQUE0RCxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ3BGLFFBQU0sT0FBTyxHQUFHO0FBQ2QsWUFBTSxFQUFFLEtBQUs7QUFDYixTQUFHLEVBQUUsR0FBRztBQUNSLGFBQU8sRUFBRTtBQUNQLHVCQUFlLGNBQVksa0JBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEFBQUU7T0FDakQ7S0FDRixDQUFDOztBQUVGLHdCQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBUyxRQUFRLEVBQUU7QUFDeEMsVUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7QUFFL0IsWUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLFlBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQyxZQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixZQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQyxZQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRW5DLFVBQUksRUFBRSxDQUFDO0tBQ1IsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILEtBQUcsQ0FBQyxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsVUFBUyxJQUFJLEVBQUU7QUFDeEYsUUFBTSxPQUFPLEdBQUc7QUFDZCxZQUFNLEVBQUUsS0FBSztBQUNiLFNBQUcsRUFBRSxHQUFHO0FBQ1IsYUFBTyxFQUFFO0FBQ1AsdUJBQWUsY0FBYztPQUM5QjtLQUNGLENBQUM7O0FBRUYsd0JBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFTLFFBQVEsRUFBRTtBQUN4QyxVQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDOztBQUUvQixZQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNDLFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9CLFlBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLFlBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxZQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFbkMsVUFBSSxFQUFFLENBQUM7S0FDUixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FFSixDQUFDLENBQUMiLCJmaWxlIjoiaG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMYWIgZnJvbSAnbGFiJztcbmltcG9ydCBzZXJ2ZXIgZnJvbSAnLi4vLi4vc2VydmVyJztcblxuaW1wb3J0IGRhdGEgZnJvbSAnLi4vZGF0YSc7XG5cbmNvbnN0IGV4cGVjdCA9IExhYi5hc3NlcnRpb25zLmV4cGVjdDtcbmV4cG9ydCBjb25zdCBsYWIgPSBMYWIuc2NyaXB0KCk7XG5cbmxhYi5leHBlcmltZW50KCdIb21lQ3RybCcsIGZ1bmN0aW9uKCkge1xuXG4gIGxhYi5iZWZvcmUoZG9uZSA9PiB7XG4gICAgZGF0YS5zeW5jKCkudGhlbihkb25lLCBkb25lKTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tpbmRleF0gcmV0dXJucyBiYXNpYyBpbmZvJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiAnLydcbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmFuLmluc3RhbmNlb2YoT2JqZWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5uYW1lKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52ZXJzaW9uKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdXRoZW50aWNhdGVkKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZWNlaXZlZCkudG8uZXhpc3QoKTtcblxuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBsYWIudGVzdCgnW2luZGV4XSByZXR1cm5zIGF1dGhlbnRpY2F0ZWQ9dHJ1ZSBpZiBnaXZlbiBhIHZhbGlkIGJlYXJlcicsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybDogJy8nLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtkYXRhLnRwLnRva2VuLnZhbHVlfWBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmFuLmluc3RhbmNlb2YoT2JqZWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5uYW1lKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52ZXJzaW9uKS50by5leGlzdCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdXRoZW50aWNhdGVkKS50by5lcXVhbCh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjZWl2ZWQpLnRvLmV4aXN0KCk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tpbmRleF0gcmV0dXJucyBhdXRoZW50aWNhdGVkPWZhbHNlIGlmIGdpdmVuIGFuIGludmFsaWQgYmVhcmVyJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiAnLycsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAxMjNgXG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlcnZlci5pbmplY3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdDtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5hbi5pbnN0YW5jZW9mKE9iamVjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQubmFtZSkudG8uZXhpc3QoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudmVyc2lvbikudG8uZXhpc3QoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXV0aGVudGljYXRlZCkudG8uZXF1YWwoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZWNlaXZlZCkudG8uZXhpc3QoKTtcblxuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXX0=