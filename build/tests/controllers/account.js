'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _dummy = require('../dummy');

var _dummy2 = _interopRequireDefault(_dummy);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('AccountCtrl', function () {

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[getAuthenticated] returns the current account', function (done) {
    var options = {
      method: 'GET',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.username).to.equal(_data2['default'].fp.account.username);
      expect(result.password).to.be.undefined();

      done();
    });
  });

  lab.test('[getAuthenticated] returns 401 without a token', function (done) {
    var options = {
      method: 'GET',
      url: '/account'
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });

  lab.test('[get] returns the correct account by id', function (done) {
    var options = {
      method: 'GET',
      url: '/account/' + _data2['default'].tp.account.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.id).to.equal(_data2['default'].tp.account.id);

      done();
    });
  });

  lab.test('[get] returns the correct account by username', function (done) {
    var options = {
      method: 'GET',
      url: '/account/' + _data2['default'].tp.account.username,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.username).to.equal(_data2['default'].tp.account.username);

      done();
    });
  });

  lab.test('[get] returns 404 if not found', function (done) {
    var options = {
      method: 'GET',
      url: '/account/000000',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[create] returns the account object', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].account()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(201);
      expect(result.username).to.equal(options.payload.username);
      expect(result.password).to.be.undefined();
      expect(result.id).to.exist();

      done();
    });
  });

  lab.test('[create] returns the profile too', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].account()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(201);
      expect(result.profile.email).to.equal(options.payload.email);
      expect(result.profile.id).to.exist();

      done();
    });
  });

  lab.test('[create] returns 401 for third parties', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: _dummy2['default'].account()
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(403);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9jb250cm9sbGVycy9hY2NvdW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O21CQUFnQixLQUFLOzs7O3NCQUNGLGNBQWM7Ozs7cUJBRWYsVUFBVTs7OztvQkFDWCxTQUFTOzs7O0FBRTFCLElBQU0sTUFBTSxHQUFHLGlCQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDOUIsSUFBTSxHQUFHLEdBQUcsaUJBQUksTUFBTSxFQUFFLENBQUM7OztBQUVoQyxHQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxZQUFXOztBQUV2QyxLQUFHLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ2pCLHNCQUFLLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDOUIsQ0FBQyxDQUFDOztBQUVILEtBQUcsQ0FBQyxJQUFJLENBQUMsZ0RBQWdELEVBQUUsVUFBUyxJQUFJLEVBQUU7QUFDeEUsUUFBTSxPQUFPLEdBQUc7QUFDZCxZQUFNLEVBQUUsS0FBSztBQUNiLFNBQUcsRUFBRSxVQUFVO0FBQ2YsYUFBTyxFQUFFO0FBQ1AsdUJBQWUsY0FBWSxrQkFBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQUFBRTtPQUNqRDtLQUNGLENBQUM7O0FBRUYsd0JBQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFTLFFBQVEsRUFBRTtBQUN4QyxVQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDOztBQUUvQixZQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0QsWUFBTSxDQUFDLE1BQU0sQ0FBQyxR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Q0FBQyxDQUFDIiwiZmlsZSI6ImFjY291bnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGFiIGZyb20gJ2xhYic7XG5pbXBvcnQgc2VydmVyIGZyb20gJy4uLy4uL3NlcnZlcic7XG5cbmltcG9ydCBkdW1teSBmcm9tICcuLi9kdW1teSc7XG5pbXBvcnQgZGF0YSBmcm9tICcuLi9kYXRhJztcblxuY29uc3QgZXhwZWN0ID0gTGFiLmFzc2VydGlvbnMuZXhwZWN0O1xuZXhwb3J0IGNvbnN0IGxhYiA9IExhYi5zY3JpcHQoKTtcblxubGFiLmV4cGVyaW1lbnQoJ0FjY291bnRDdHJsJywgZnVuY3Rpb24oKSB7XG5cbiAgbGFiLmJlZm9yZShkb25lID0+IHtcbiAgICBkYXRhLnN5bmMoKS50aGVuKGRvbmUsIGRvbmUpO1xuICB9KTtcblxuICBsYWIudGVzdCgnW2dldEF1dGhlbnRpY2F0ZWRdIHJldHVybnMgdGhlIGN1cnJlbnQgYWNjb3VudCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybDogJy9hY2NvdW50JyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7ZGF0YS5mcC50b2tlbi52YWx1ZX1gXG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlcnZlci5pbmplY3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdDtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzdWx0LnVzZXJuYW1lKS50by5lcXVhbChkYXRhLmZwLmFjY291bnQudXNlcm5hbWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wYXNzd29yZCkudG8uYmUudW5kZWZpbmVkKCk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tnZXRBdXRoZW50aWNhdGVkXSByZXR1cm5zIDQwMSB3aXRob3V0IGEgdG9rZW4nLCBmdW5jdGlvbihkb25lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvYWNjb3VudCdcbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvLmVxdWFsKDQwMSk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGxhYi50ZXN0KCdbZ2V0XSByZXR1cm5zIHRoZSBjb3JyZWN0IGFjY291bnQgYnkgaWQnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvYWNjb3VudC8nICsgZGF0YS50cC5hY2NvdW50LmlkLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtkYXRhLmZwLnRva2VuLnZhbHVlfWBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaWQpLnRvLmVxdWFsKGRhdGEudHAuYWNjb3VudC5pZCk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tnZXRdIHJldHVybnMgdGhlIGNvcnJlY3QgYWNjb3VudCBieSB1c2VybmFtZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybDogJy9hY2NvdW50LycgKyBkYXRhLnRwLmFjY291bnQudXNlcm5hbWUsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2RhdGEuZnAudG9rZW4udmFsdWV9YFxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZXJ2ZXIuaW5qZWN0KG9wdGlvbnMsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5yZXN1bHQ7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC51c2VybmFtZSkudG8uZXF1YWwoZGF0YS50cC5hY2NvdW50LnVzZXJuYW1lKTtcblxuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBsYWIudGVzdCgnW2dldF0gcmV0dXJucyA0MDQgaWYgbm90IGZvdW5kJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiAnL2FjY291bnQvMDAwMDAwJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7ZGF0YS5mcC50b2tlbi52YWx1ZX1gXG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlcnZlci5pbmplY3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCg0MDQpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBsYWIudGVzdCgnW2NyZWF0ZV0gcmV0dXJucyB0aGUgYWNjb3VudCBvYmplY3QnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsOiAnL2FjY291bnQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtkYXRhLmZwLnRva2VuLnZhbHVlfWBcbiAgICAgIH0sXG4gICAgICBwYXlsb2FkOiBkdW1teS5hY2NvdW50KClcbiAgICB9O1xuXG4gICAgc2VydmVyLmluamVjdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudXNlcm5hbWUpLnRvLmVxdWFsKG9wdGlvbnMucGF5bG9hZC51c2VybmFtZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnBhc3N3b3JkKS50by5iZS51bmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaWQpLnRvLmV4aXN0KCk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tjcmVhdGVdIHJldHVybnMgdGhlIHByb2ZpbGUgdG9vJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybDogJy9hY2NvdW50JyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7ZGF0YS5mcC50b2tlbi52YWx1ZX1gXG4gICAgICB9LFxuICAgICAgcGF5bG9hZDogZHVtbXkuYWNjb3VudCgpXG4gICAgfTtcblxuICAgIHNlcnZlci5pbmplY3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdDtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvLmVxdWFsKDIwMSk7XG4gICAgICBleHBlY3QocmVzdWx0LnByb2ZpbGUuZW1haWwpLnRvLmVxdWFsKG9wdGlvbnMucGF5bG9hZC5lbWFpbCk7XG4gICAgICBleHBlY3QocmVzdWx0LnByb2ZpbGUuaWQpLnRvLmV4aXN0KCk7XG5cbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgbGFiLnRlc3QoJ1tjcmVhdGVdIHJldHVybnMgNDAxIGZvciB0aGlyZCBwYXJ0aWVzJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybDogJy9hY2NvdW50JyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7ZGF0YS50cC50b2tlbi52YWx1ZX1gXG4gICAgICB9LFxuICAgICAgcGF5bG9hZDogZHVtbXkuYWNjb3VudCgpXG4gICAgfTtcblxuICAgIHNlcnZlci5pbmplY3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCg0MDMpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXX0=