'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _modelsAccount = require('../../models/account');

var _modelsAccount2 = _interopRequireDefault(_modelsAccount);

var _dummy = require('../dummy');

var _dummy2 = _interopRequireDefault(_dummy);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('AccountCtrl', function () {

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[getAuthenticated] returns the current account', function (done) {
    var options = {
      method: 'GET',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.profile.email).to.equal(_data2['default'].fp.account.profile.email);
      expect(result.username).to.equal(_data2['default'].fp.account.username);
      expect(result.password).to.be.undefined();

      done();
    });
  });

  lab.test('[getAuthenticated] returns 401 without a token', function (done) {
    var options = {
      method: 'GET',
      url: '/account'
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });

  lab.test('[get] returns the correct account by id', function (done) {
    var options = {
      method: 'GET',
      url: '/account/' + _data2['default'].tp.account.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.id).to.equal(_data2['default'].tp.account.id);

      done();
    });
  });

  lab.test('[get] returns the correct account by username', function (done) {
    var options = {
      method: 'GET',
      url: '/account/' + _data2['default'].tp.account.username,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.username).to.equal(_data2['default'].tp.account.username);

      done();
    });
  });

  lab.test('[get] returns 404 if not found', function (done) {
    var options = {
      method: 'GET',
      url: '/account/000000',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[create] returns the account object', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].accountProfile()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(201);
      expect(result.username).to.equal(options.payload.username);
      expect(result.password).to.be.undefined();
      expect(result.id).to.exist();

      done();
    });
  });

  lab.test('[create] returns the profile too', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: _dummy2['default'].accountProfile()
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(201);
      expect(result.profile.email).to.equal(options.payload.email);
      expect(result.profile.id).to.exist();

      done();
    });
  });

  lab.test('[create] returns 401 for third parties', function (done) {
    var options = {
      method: 'POST',
      url: '/account',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: _dummy2['default'].accountProfile()
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(403);
      done();
    });
  });

  lab.test('[update] returns 200 even if update is empty', function (done) {
    var options = {
      method: 'PUT',
      url: '/account/' + _data2['default'].tp.account.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(200);
      done();
    });
  });

  lab.test('[update] returns the new password when updated by id', function (done) {
    _data2['default'].tp.account.unencryptedPassword = 'tp_myNewPass';

    var options = {
      method: 'PUT',
      url: '/account/' + _data2['default'].tp.account.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        password: _data2['default'].tp.account.unencryptedPassword
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.username).to.exist();

      _modelsAccount2['default'].get(result.username).run().then(function (account) {
        expect(account.password).not.to.equal(_data2['default'].tp.account.password);
        _data2['default'].tp.account.password = account.password;
        done();
      })['catch'](done);
    });
  });

  lab.test('[update] returns the new password when updated by username', function (done) {
    _data2['default'].tp.account.unencryptedPassword = 'tp_myNewPass';

    var options = {
      method: 'PUT',
      url: '/account/' + _data2['default'].tp.account.username,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        password: _data2['default'].tp.account.unencryptedPassword
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.username).to.exist();

      _modelsAccount2['default'].get(result.username).run().then(function (account) {
        expect(account.password).not.to.equal(_data2['default'].tp.account.password);
        _data2['default'].tp.account.password = account.password;
        done();
      })['catch'](done);
    });
  });

  lab.test('[delete] returns 204 when deleted by id', function (done) {
    var options = {
      method: 'DELETE',
      url: '/account/' + _data2['default'].tempAccount1.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(204);
      done();
    });
  });

  lab.test('[delete] returns 204 when deleted by username', function (done) {
    var options = {
      method: 'DELETE',
      url: '/account/' + _data2['default'].tempAccount2.username,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(204);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,