'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _faker = require('faker');

var _faker2 = _interopRequireDefault(_faker);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('AuthCtrl', function () {

  var oauthScope = 'test';
  var oauthCode = null;

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[authorize] returns an oauth code for exchange', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/authorize',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        scope: oauthScope,
        clientId: _data2['default'].client.id
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;
      oauthCode = result.value;

      expect(response.statusCode).to.equal(200);
      expect(result.clientId).to.equal(_data2['default'].client.id);
      expect(result.value).to.exist();

      done();
    });
  });

  lab.test('[exchangeCode] returns an error if the secret is invalid', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/code',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        code: oauthCode,
        clientId: _data2['default'].client.id,
        clientSecret: 'ItsNotASecretIfYouToldEverybody'
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(400);
      done();
    });
  });

  lab.test('[exchangeCode] returns a bearer token if the code is valid', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/code',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        code: oauthCode,
        clientId: _data2['default'].client.id,
        clientSecret: _data2['default'].client.secret
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.scope).to.equal(oauthScope);
      expect(result.value).to.exist();

      done();
    });
  });

  lab.test('[exchangeCode] returns an error if the code is invalid', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/code',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        code: '10240',
        clientId: _data2['default'].client.id,
        clientSecret: _data2['default'].client.secret
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[exchangeCode] returns an error if the code has already been used', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/code',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        code: oauthCode,
        clientId: _data2['default'].client.id,
        clientSecret: _data2['default'].client.secret
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(400);
      done();
    });
  });

  lab.test('[exchangeCredentials] returns a bearer token for valid credentials', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/credentials',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        username: _data2['default'].account.username,
        password: _data2['default'].account.unencryptedPassword
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.value).to.exist();

      done();
    });
  });

  lab.test('[exchangeCredentials] returns 401 for invalid password', function (done) {
    var options = {
      method: 'POST',
      url: '/oauth/exchange/credentials',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        username: _data2['default'].account.username,
        password: '1337'
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,