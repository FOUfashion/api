'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lab = require('lab');

var _lab2 = _interopRequireDefault(_lab);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _data = require('../data');

var _data2 = _interopRequireDefault(_data);

var expect = _lab2['default'].assertions.expect;
var lab = _lab2['default'].script();

exports.lab = lab;
lab.experiment('ProfileCtrl', function () {

  lab.before(function (done) {
    _data2['default'].sync().then(done, done);
  });

  lab.test('[getAuthenticated] returns the current profile', function (done) {
    var options = {
      method: 'GET',
      url: '/profile',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.email).to.equal(_data2['default'].fp.account.profile.email);

      done();
    });
  });

  lab.test('[getAuthenticated] returns 401 without a token', function (done) {
    var options = {
      method: 'GET',
      url: '/profile'
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });

  lab.test('[get] returns the correct profile by id', function (done) {
    var options = {
      method: 'GET',
      url: '/profile/' + _data2['default'].tp.account.profile.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.id).to.equal(_data2['default'].tp.account.profile.id);

      done();
    });
  });

  lab.test('[get] returns the correct profile by email', function (done) {
    var options = {
      method: 'GET',
      url: '/profile/' + encodeURIComponent(_data2['default'].tp.account.profile.email),
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.email).to.equal(_data2['default'].tp.account.profile.email);

      done();
    });
  });

  lab.test('[get] returns 404 if not found by id', function (done) {
    var options = {
      method: 'GET',
      url: '/profile/123-456',
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[get] returns 404 if not found by email', function (done) {
    var options = {
      method: 'GET',
      url: '/profile/' + encodeURIComponent('not@found.com'),
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });

  lab.test('[update] returns the profile with a new first name (by id)', function (done) {
    var options = {
      method: 'PUT',
      url: '/profile/' + _data2['default'].tp.account.profile.id,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: {
        firstName: 'Gargantua'
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.name.first).to.equal('Gargantua');

      done();
    });
  });

  lab.test('[update] returns the profile with a new last name (by email)', function (done) {
    var options = {
      method: 'PUT',
      url: '/profile/' + _data2['default'].tp.account.profile.email,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].tp.token.value
      },
      payload: {
        lastName: 'Batman'
      }
    };

    _server2['default'].inject(options, function (response) {
      var result = response.result;

      expect(response.statusCode).to.equal(200);
      expect(result.name.last).to.equal('Batman');

      done();
    });
  });

  lab.test('[update] returns 401 if trying to update someone else\'s profile', function (done) {
    var options = {
      method: 'PUT',
      url: '/profile/' + _data2['default'].tp.account.profile.email,
      headers: {
        'Authorization': 'Bearer ' + _data2['default'].fp.token.value
      },
      payload: {
        lastName: 'Batman'
      }
    };

    _server2['default'].inject(options, function (response) {
      expect(response.statusCode).to.equal(401);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,